#!/usr/bin/perl -w

package Vetstoria;

use strict;
use warnings;
use MIME::Base64 qw( encode_base64 decode_base64 encode_base64url decode_base64url );
use Crypt::CBC;

my $VetstoriaBase_Test = 'https://booking-qa.vetstoria.com/';
my $VetstoriaBase_Prod = 'https://nva.vetstoria.com/';
my $VetstoriaBase = $VetstoriaBase_Prod;

my $EncryptionKey = 'aG@j33K`,2A<2ZsEZK#k\qL9SWd~W}u#J6W"^6$}M@g#!\5}(^"Dtx%3';
my $Debugging = 0;
my $Use_V2 = 1;
my $Include_Reason = 0;

sub new {
   my ($class, $options) = @_;

   if (defined($options)) {
      $Debugging       = $options->{debug}          if (exists($options->{debug}));
      $Use_V2          = $options->{use_v2}         if (exists($options->{use_v2}));
      $Include_Reason  = $options->{include_reason} if (exists($options->{include_reason}));
      if (exists($options->{test}) && ($options->{test})) {
         $VetstoriaBase = $VetstoriaBase_Test;
      }
   }

   my $self = {
      cipher    => Crypt::CBC->new( -key            => $EncryptionKey,
                                    -cipher         => 'Blowfish',
#                                    -iv => '12345678',
                                    -regenerate_key => 0,
                                    -padding        => 'null',
                                    -prepend_iv     => 0,
                                    -header         => 'randomiv'
                                  ),
   };
   bless $self, $class;

   return $self;
}
#=======================================================================


sub CreateURL {
   my ($self, $HospitalSiteHash, $PMS_Client_Id, $PMS_Patient_Id) = @_;

   my $url = $VetstoriaBase . $HospitalSiteHash . '/';
   my $json = "{\"c_id\":\"$PMS_Client_Id\", \"p_id\":\"$PMS_Patient_Id\"}";
   print "json: $json\n" if $Debugging;
   $json = encode_base64url($json);
   print "json base 64: $json\n" if $Debugging;
   $json = $self->{cipher}->encrypt($json);
   print "encrypted json: $json\n" if $Debugging;
   $json = encode_base64url($json);
   print "encrypted json base 64: $json\n" if $Debugging;

   return $url . $json;
}
#=======================================================================


sub DecodeURL {
   my ($self, $url) = @_;

   my ($hospital, $json) = (split(/\//, $url, 5)) [3..4];

   print "hospital = $hospital\n" if $Debugging;
   print "json as in url = $json\n" if $Debugging;
   $json = decode_base64url($json);
   print "encoded json = $json\n" if $Debugging;
   $json = $self->{cipher}->decrypt($json);
   print "encoded json base 64= $json\n" if $Debugging;
   $json = decode_base64url($json);
   print "json = $json\n" if $Debugging;
   $json =~ /"c_id":"([^"]*)", "p_id":"([^"]*?)"/;
   return ($hospital, $1, $2);

}
#=======================================================================


1;

my @vetstoria_params = ();
my %options = ();


foreach my $arg (@ARGV) {
   if (substr($arg, 0, 2) eq '--') {
      $arg = lc($arg);
      if ($arg eq '--test') {
         $options{test} = 1;
      }
      elsif ($arg eq '--include_reason') {
         $options{include_reason} = 1;
      }
      else {
         print "ERR: Illegal command line option '$arg'\n";
         exit(1);
      }
   } else {
      push @vetstoria_params, ($arg);
   }
}

unless ((scalar(@vetstoria_params) == 2) || (scalar(@vetstoria_params) == 3)) {
   print "ERR: Usage is $0 {hospital_code} {pms_client_code} [{pms_client_code}]\n";
   exit(1);
}

my ($hospital, $client, $patient) = (@vetstoria_params, '');

my $vetstoria = Vetstoria->new(\%options);

my $long_url = $vetstoria->CreateURL($hospital, $client, $patient);

print "$long_url";

exit()
